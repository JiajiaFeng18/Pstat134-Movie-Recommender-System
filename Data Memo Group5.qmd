---
title: "Data Memo Group5"
format: html
editor: visual
author: Valerie De La Fuente, Leslie Cervantes Rivera, Tess Ivinjack, Jiajia Feng
---

## Overview of Dataset

```{python}
import requests
import pandas as pd

api_key = "d3e8d7fcb94be031986259192b4fdfb0"

# Base URL for the TMDb popular movies endpoint
url = "https://api.themoviedb.org/3/movie/popular"

# Set parameters like the page number and API key
parameters = {
    "api_key": api_key,
    "page":1
}

# Make the GET request to fetch the data
response = requests.get(url, params=parameters)

# Check if the request was successful
if response.status_code == 200:
    data = response.json()  
    movies = data["results"]  
    movies_df = pd.DataFrame(movies)
    print(df)

else:
    print("Error", response.status_code)

# Checking for missing data
missing_data = movies_df.isnull().sum()
print(missing_data)
```

We are accessing data from The Movie Database (TMDb) API. The main website is https://www.themoviedb.org/. To access the API, we created an account through the main website and requested a key under the settings for the account. We aim to use the data given by this API to create a movie recommender system.

The output of the code above is a dataframe that contains predictors from the `change_keys` array and `images` objects. We will be using these predictors to extract movie information while changing endpoints to adjust for new/more information as needed. These types of variables include movie information of all types. We will be using variables related to the viewer and to the movies themselves. As we explore the API more, we will have definitive predictors that we will be using .There are 20 results/observations per page and we will be adjusting the amount of pages for more observations. From the output above, we can see that there is no missing data to be handled.

## Research Question(s)

1.  **Objective: What are we trying to predict?**

The primary goal of our project is to predict a dynamic list of movies tailored to users’ preferences. By analyzing user input (e.g., selected movies or genres), the system will identify and rank similar movies based on key metadata such as genres, descriptions, and ratings. This enables a personalized movie discovery experience.

2.  **Factors Driving Recommendations**

-   **Genres**: Movies sharing similar genres are often perceived as related, making this a crucial factor in building recommendations.

-   **Overview (Descriptions)**: Similarities in movie synopses, captured using text analysis techniques like TF-IDF.

-   **Ratings**: Moviegoers ratings provide an important measure of overall movie quality and popularity.

-   **Keywords**: Metadata keywords from TMDB reveal connections between movies through shared themes or features.

3.  **Research Questions**

-   How can we recommend movies that align with users’ preferences effectively?
-   What factors (e.g., genres, ratings, or popularity) contribute most to determining relevant recommendations?
-   How does similarity in movie metadata (e.g., overview or genre) influence the quality of recommendations?

4.  **Model Purpose**

The model serves both descriptive and predictive purposes:

-   **Descriptive**: To analyze patterns in movie metadata and understand the underlying relationships between movies that drive similarity.

-   **Predictive**: To generate personalized recommendations for users based on their inputs, applying TMDB’s API and advanced text similarity measures.

## Proposed Project Timeline

We plan on having the data set loaded in by February 8th, tidy data by February 16th, and the explanatory analysis by February 28th. From then on, we plan on running models by March 8th, write-ups by March 12, edits and final draft by March 16th.

## Questions or Concerns
