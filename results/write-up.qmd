---
title: "Movie Recommender System Project"
authors: "Jiajia Feng, Tess Ivinjack, Leslie Cervantes Rivera, Valerie De La Fuente"
date: 03-19-15
editor: visual
format: html
code-copy: true
execute:
  message: false
  warning: false
  echo: false
  cache: true
---

## Introduction

### Objective

This project aims to develop a movie recommendation system using data from The Movie Database (TMDb) API. By applying Python-based machine learning techniques, the system will analyze user preferences and suggest relevant movies. The goal is to create a personalized, efficient recommendation system that enhances content discovery for users.

### Motivation

In today's digital entertainment world, users are overwhelmed with content options, making personalized recommendations more essential than ever. Recommendation systems help by offering tailored suggestions, improving user engagement and satisfaction. With platforms like Netflix and Hulu relying on data-driven algorithms, effective recommendation systems are crucial in enhancing viewer experience. Using data from an API like TMDb, which includes extensive movie data, allows for more accurate and relevant content suggestions. This allows for a more engaging and relevant user experience, fostering deeper interaction with the platform and greater satisfaction with the recommendations provided.

### Data Description

### Methodology

Briefly mention the key methods, tools, and datasets used.

## Data Collection and Preparation

### API Data Retrieval

Describe the API used (e.g., TMDb), endpoints queried, and relevant data fields collected (e.g., genres, ratings, cast).

### Data Cleaning

Explain key preprocessing steps like handling missing values, formatting genre data, and transforming ratings.

### Feature Engineering

Describe features created for both content-based (e.g., TF-IDF for movie descriptions) and collaborative filtering (e.g., user-item matrices).

### EDA

In this section, we are focusing on Exploratory Data Analysis (EDA) to better understand the data. This is the stage where we are given insights into the structure and characteristics of the data, for instance missing values.

#### Missing Data

![](images/clipboard-1834072139.png){width="307" height="424"}

The dataset `movie_content_df` is missing some observations in `genre_ids`, `cast_names`, and `watch_providers`.

![](images/clipboard-3610589772.png){width="323"}

While in the `movie_reviews_df`, it is missing a majority of `user_rating`.

#### Popular Genres

![](images/clipboard-2075077829.png){width="323"}

Redo

#### Popular Movie Languages

![](images/clipboard-3794390472.png){width="397"}

We can see most of the languages in our dataset have the original language in English with a count of approximately 2,800. The following most popular languages are French and Japanese with a count of approximately 500 and 100.

#### Popular Actors

![](images/clipboard-1337669541.png){width="397"}

As we can see "Jr." is the most common actor in our movie dataset with a count of approximately 85. We do not know who exactly "Jr." is, but we believe the name was cut when retrieving the data. Other actors such as Samuel L. Jackson, and Bruce Willis were also common with a count of approximately 45 and 42.

#### Providers

![](images/clipboard-50046222.png){width="453"}

Our top provider is 'Sony Liv' which is a Indian subscription streaming service. This provider provides approximately 13,000 REDO

#### Rating Average vs Vote Count

![](images/clipboard-3306005980.png){width="453"}

## Modeling Approach

### Content-Based Filtering

-   Describe the method (e.g., cosine similarity using TF-IDF vectors or count vectors).

-   Outline the steps to calculate similarity scores.

-   Highlight key implementation details (e.g., efficient storage of vectors).

### Collaborative Filtering

-   Explain the technique (e.g., matrix factorization with Surprise library or k-nearest neighbors).

-   Describe how user-item interactions are utilized.

### Evaluation

-   Describe performance metrics used (e.g., precision, recall, RMSE).

-   Provide results with brief interpretation.

## Results and Analysis

-   Highlight key findings from both models.

-   Compare the strengths and weaknesses of content-based and collaborative filtering approaches.

-   Discuss any challenges faced (e.g., cold start problem) and how you addressed them.

## Conclusion

-   Summarize the project's achievements.

-   Suggest potential improvements (e.g., hybrid models, enhanced data sources, or improved user interface).

-   Mention real-world applications or extensions of the system.
