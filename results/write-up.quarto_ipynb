{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Movie Recommender System Project\"\n",
        "authors: \"Jiajia Feng, Tess Ivinjack, Leslie Cervantes Rivera, Valerie De La Fuente\"\n",
        "date: 03-19-15\n",
        "editor: visual\n",
        "format: html\n",
        "code-copy: true\n",
        "execute:\n",
        "  message: false\n",
        "  warning: false\n",
        "  echo: false\n",
        "  cache: true\n",
        "---\n",
        "\n",
        "\n",
        "## Introduction\n",
        "\n",
        "### Objective\n",
        "\n",
        "This project aims to develop a movie recommendation system using data from The Movie Database (TMDb) API. By applying Python-based machine learning techniques, the system will analyze user preferences and suggest relevant movies. The goal is to create a personalized, efficient recommendation system that enhances content discovery for users.\n",
        "\n",
        "### Motivation\n",
        "\n",
        "In today's digital entertainment world, users are overwhelmed with content options, making personalized recommendations more essential than ever. Recommendation systems help by offering tailored suggestions, improving user engagement and satisfaction. With platforms like Netflix and Hulu relying on data-driven algorithms, effective recommendation systems are crucial in enhancing viewer experience. Using data from an API like TMDb, which includes extensive movie data, allows for more accurate and relevant content suggestions. This allows for a more engaging and relevant user experience, fostering deeper interaction with the platform and greater satisfaction with the recommendations provided.\n",
        "\n",
        "### Data Description\n",
        "\n",
        "### Methodology\n",
        "\n",
        "Briefly mention the key methods, tools, and datasets used.\n",
        "\n",
        "## Data Collection and Preparation\n",
        "\n",
        "### API Data Retrieval\n",
        "\n",
        "Describe the API used (e.g., TMDb), endpoints queried, and relevant data fields collected (e.g., genres, ratings, cast).\n",
        "\n",
        "### Data Cleaning\n",
        "\n",
        "Explain key preprocessing steps like handling missing values, formatting genre data, and transforming ratings.\n",
        "\n",
        "### Feature Engineering\n",
        "\n",
        "Describe features created for both content-based (e.g., TF-IDF for movie descriptions) and collaborative filtering (e.g., user-item matrices).\n",
        "\n",
        "## Exploratory Data Analysis (EDA)\n",
        "\n",
        "In this section, we are focusing on EDA to better understand the data. This is the stage where we are given insights into the structure and characteristics of the data, for instance missing values.\n",
        "\n",
        "### Variables\n"
      ],
      "id": "2311a63a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from prettytable import PrettyTable\n",
        "table = PrettyTable()\n",
        "table.field_names = [\"Variable Name\", \"Description\"]\n",
        "table.add_row(['movie_id', 'Unique identifier of the movie.'])\n",
        "table.add_row(['title', 'Title of the movie.'])\n",
        "table.add_row(['release_year', 'The year the movie was released.'])\n",
        "table.add_row(['genre_ids', 'List of genres associated with a movie.'])\n",
        "table.add_row(['original_language', 'Original language of the movie.'])\n",
        "table.add_row(['cast_names', 'List of actors in the movie.'])\n",
        "table.add_row(['watch_providers', 'Streaming platforms where the movie is available.'])\n",
        "table.add_row(['rating_average', 'A quantitative assessment of the overall quality of a movie.'])\n",
        "table.add_row(['vote_count', 'The total number of people who voted for the movie.'])\n",
        "table.add_row(['author', 'Unique identifier for the user.'])\n",
        "table.add_row(['user_rating', 'Rating given by user.'])\n",
        "print(table)"
      ],
      "id": "6c4cb3bb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Missing Data\n",
        "\n",
        "![](images/clipboard-1834072139.png){width=\"307\" height=\"424\"}\n",
        "\n",
        "The dataset `movie_content_df` is missing some observations in `genre_ids`, `cast_names`, and `watch_providers`.\n",
        "\n",
        "![](images/clipboard-3610589772.png){width=\"323\"}\n",
        "\n",
        "While in the `movie_reviews_df`, it is missing a majority of `user_rating`.\n",
        "\n",
        "#### Popular Genres\n",
        "\n",
        "![](images/clipboard-1866196344.png){width=\"394\"}\n",
        "\n",
        "About 1600 of movies mention Drama in their genre list. Comedy and Thriller are the next popular genres with approximately 1400 and 1000 counts.\n",
        "\n",
        "#### Popular Movie Languages\n",
        "\n",
        "![](images/clipboard-1260077373.png){width=\"394\"}\n",
        "\n",
        "We can see most of the languages in our dataset have the original language in English with a count of approximately 2,800. The following most popular languages are French and Japanese with a count of approximately 500 and 100.\n",
        "\n",
        "#### Popular Actors\n",
        "\n",
        "![](images/clipboard-1337669541.png){width=\"397\"}\n",
        "\n",
        "As we can see \"Jr.\" is the most common actor in our movie dataset with a count of approximately 85. We do not know who exactly \"Jr.\" is, but we believe the name was cut when retrieving the data. Other actors such as Samuel L. Jackson, and Bruce Willis were also common with a count of approximately 45 and 42.\n",
        "\n",
        "#### Providers\n",
        "\n",
        "![](images/clipboard-3952843974.png){width=\"394\"}\n",
        "\n",
        "Our top providers are 'Apple TV', 'Google Play Movies', and 'Amazon Video'. They offer most of our movies in the dataset, offering approximately 3,000 movies.\n",
        "\n",
        "#### Reviewers\n",
        "\n",
        "![](images/clipboard-577182410.png){width=\"394\"}\n",
        "\n",
        "'CinemaSerf' is our top reviewer, reviewing approximately 300 movies. Following the author, 'r96sk' and 'Manuel SÃ£o Bento' are the next top reviewers with approximately 170 and 110 movie reviews.\n",
        "\n",
        "## Modeling Approach\n",
        "\n",
        "### Content-Based Filtering\n",
        "\n",
        "Content-based filtering recommends movies based on their features rather than user interactions. We use TF-IDF vectorization to encode movie attributes and compute similarity using cosine similarity and linear kernel similarity.\n",
        "\n",
        "**Implementation Steps:** \\\n",
        "1. **Feature Engineering**\n",
        "\n",
        "-   Combine `genre_ids`, `cast_names`, and `watch_providers` into a single text feature.\n",
        "\n",
        "2\\. **TF-IDF Vectorization**\n",
        "\n",
        "-   Convert text features into numerical vectors.\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "-    Use `min_df=2` to filter out infrequent terms.\n",
        "\n",
        "3\\. **Computing Similarity**\n",
        "\n",
        "-    Use cosine similarity for text-based similarity.\n",
        "\n",
        "-    Integrate `rating_average` and `vote_count` with linear kernel similarity for better ranking.\n",
        "\n",
        "4\\. **Recommendation System**\n",
        "\n",
        "-    Use fuzzy matching to correct user input.\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "-   Retrieve and rank the most similar movies based on the similarity matrix.\n",
        "\n",
        "    ![Cosine Similarity Recommendation Results](images/Screenshot 2025-03-14 at 13.42.54.png)![]()\n",
        "\n",
        "### Collaborative Filtering\n",
        "\n",
        "-   Explain the technique (e.g., matrix factorization with Surprise library or k-nearest neighbors).\n",
        "\n",
        "-   Describe how user-item interactions are utilized.\n",
        "\n",
        "### Evaluation\n",
        "\n",
        "-   Describe performance metrics used (e.g., precision, recall, RMSE).\n",
        "\n",
        "-   Provide results with brief interpretation.\n",
        "\n",
        "## Results and Analysis\n",
        "\n",
        "-   Highlight key findings from both models.\n",
        "\n",
        "-   Compare the strengths and weaknesses of content-based and collaborative filtering approaches.\n",
        "\n",
        "-   Discuss any challenges faced (e.g., cold start problem) and how you addressed them.\n",
        "\n",
        "## Conclusion\n",
        "\n",
        "-   Summarize the project's achievements.\n",
        "\n",
        "-   Suggest potential improvements (e.g., hybrid models, enhanced data sources, or improved user interface).\n",
        "\n",
        "-   Mention real-world applications or extensions of the system."
      ],
      "id": "75bc04db"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/fengci/Library/Python/3.11/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}